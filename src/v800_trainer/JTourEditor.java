package v800_trainer;

 /*
 * JTourEditor.java


 *
 * SourceFile is part of Chainwheel

 * Editor for Tour Data (correct level append delete)
 */



/**
 *
 * @author  volker hochholzer
 * 
 * Chainwheel and all dependend source files is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Chainwheel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.



 * Created on 11. Juni 2001, 20:59
 */



import javax.swing.table.*;
import java.lang.String.*;
import javax.swing.*;
import javax.swing.JOptionPane;
import java.awt.*;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;



public class JTourEditor extends javax.swing.JDialog {
    
    /** Creates new form JTourEditor */
    public JTourEditor(java.awt.Frame parent, boolean modal) {
        
        super(parent, modal);
        int i = 0;
        TronicHandle = (JCicloTronic) parent;
        TronicHandle.SelectionChanged = true;
        
        initComponents();
        Saved = false;
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        setSize((int) (dim.width * 0.9), (int) (dim.height * 0.9));
        setLocation(10, 10);
        
        if (TronicHandle.Auswahl_Statistik.getItemCount() <= 1) {
            JOptionPane.showMessageDialog(null, "Keine Tour selektiert!", "Achtung!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (i = 1; i < TronicHandle.Auswahl_Statistik.getItemCount(); i++) {
            jComboBox1.addItem(TronicHandle.Auswahl_Statistik.getItemAt(i));
        }
        
        buttonGroup2.add(jRadioButton1mitHoehenanpassung);
        buttonGroup2.add(jRadioButton2ohneHoehenanpassung);
        jRadioButton1mitHoehenanpassung.setSelected(true);
        
        if (TronicHandle.Auswahl_Statistik.getItemCount() == 2) {
            jButton3TourVerbinden.setEnabled(false);
            jRadioButton1mitHoehenanpassung.setEnabled(false);
            jRadioButton2ohneHoehenanpassung.setEnabled(false);
            jLabel1.setEnabled(false);
            
        }
        
        format = new java.text.DecimalFormat("####0.000");
        formatsymbols = new java.text.DecimalFormatSymbols();
        formatsymbols.setDecimalSeparator('.');
        format.setDecimalFormatSymbols(formatsymbols);
        
        Update = true;
        
        changeModel();
        
        setVisible(true);
       
         repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup2 = new javax.swing.ButtonGroup();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1HoeheAnfangEnde = new javax.swing.JButton();
        jButton2Hoehenanpassung = new javax.swing.JButton();
        jTextField1Hoehenanpassung = new javax.swing.JTextField();
        jButton3TourVerbinden = new javax.swing.JButton();
        jRadioButton1mitHoehenanpassung = new javax.swing.JRadioButton();
        jRadioButton2ohneHoehenanpassung = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButton4Kopieren = new javax.swing.JButton();
        jButton5Einfügen = new javax.swing.JButton();
        jButton6Loeschen = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jButton7Speichern = new javax.swing.JButton();
        jButton8Beenden = new javax.swing.JButton();
        jTextField2Datum = new javax.swing.JTextField();
        jTextField3Startzeit = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldLaufIndex = new javax.swing.JTextField();
        jTextFieldErholungszeit = new javax.swing.JTextField();
        jTextFieldBelastung = new javax.swing.JTextField();
        jTextFieldProtein = new javax.swing.JTextField();
        jTextFieldFett = new javax.swing.JTextField();
        jTextField1Typ = new javax.swing.JTextField();
        jTextFieldKalorien = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton2Streckenskalierung = new javax.swing.JButton();
        jTextField1Streckenskalierung = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("JTourEditor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0};
        layout.rowHeights = new int[] {0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0};
        getContentPane().setLayout(layout);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jComboBox1, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 17;
        gridBagConstraints.gridheight = 29;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jButton1HoeheAnfangEnde.setText("Nivelierung");
        jButton1HoeheAnfangEnde.setToolTipText("Linearer Ausgleich von Druckschwankungen. Endhöhe wird gleich Anfangshöhe.");
        jButton1HoeheAnfangEnde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1HoeheAnfangEndeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton1HoeheAnfangEnde, gridBagConstraints);

        jButton2Hoehenanpassung.setText("Höhenänderung");
        jButton2Hoehenanpassung.setToolTipText("Verschiebt die Höhe der Tour um den angegebenen Wert");
        jButton2Hoehenanpassung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2HoehenanpassungActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton2Hoehenanpassung, gridBagConstraints);

        jTextField1Hoehenanpassung.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1Hoehenanpassung.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextField1Hoehenanpassung, gridBagConstraints);

        jButton3TourVerbinden.setText("Touren Verbinden");
        jButton3TourVerbinden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3TourVerbindenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton3TourVerbinden, gridBagConstraints);

        jRadioButton1mitHoehenanpassung.setText("mit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jRadioButton1mitHoehenanpassung, gridBagConstraints);

        jRadioButton2ohneHoehenanpassung.setText("ohne");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jRadioButton2ohneHoehenanpassung, gridBagConstraints);

        jLabel9.setText("Lauf-Index");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel9, gridBagConstraints);

        jLabel8.setText("Erholungszeit (s)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel8, gridBagConstraints);

        jLabel7.setText("Belastung");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel7, gridBagConstraints);

        jLabel10.setText("Protein [%]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel10, gridBagConstraints);

        jLabel6.setText("Fett [%]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel6, gridBagConstraints);

        jLabel5.setText("Kalorien [kCal]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel5, gridBagConstraints);

        jLabel1.setText("Höhenanpassung");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 24;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 34;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jSeparator2, gridBagConstraints);

        jButton4Kopieren.setText("Daten kopieren");
        jButton4Kopieren.setToolTipText("Kopiert die selektierten Zeilen in einen Buffer.");
        jButton4Kopieren.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4KopierenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton4Kopieren, gridBagConstraints);

        jButton5Einfügen.setText("Daten einfügen");
        jButton5Einfügen.setToolTipText("Fügt Daten aus dem Buffer nach der selektieren Zeile ein");
        jButton5Einfügen.setEnabled(false);
        jButton5Einfügen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5EinfügenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton5Einfügen, gridBagConstraints);

        jButton6Loeschen.setText("Daten löschen");
        jButton6Loeschen.setToolTipText("Die selektierten Daten werden gelöscht.");
        jButton6Loeschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6LoeschenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton6Loeschen, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jSeparator4, gridBagConstraints);

        jButton7Speichern.setText("Speichern");
        jButton7Speichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7SpeichernActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton7Speichern, gridBagConstraints);

        jButton8Beenden.setText("Beenden");
        jButton8Beenden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8BeendenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton8Beenden, gridBagConstraints);

        jTextField2Datum.setText("jTextField2");
        jTextField2Datum.setToolTipText("Format: dd.mm.yyyy");
        jTextField2Datum.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextField2Datum.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextField2Datum, gridBagConstraints);

        jTextField3Startzeit.setText("jTextField3");
        jTextField3Startzeit.setToolTipText("Format: hh:mm");
        jTextField3Startzeit.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextField3Startzeit.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextField3Startzeit, gridBagConstraints);

        jLabel2.setText("Datum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Typ");
        jLabel3.setMinimumSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jLabel3, gridBagConstraints);

        jTextFieldLaufIndex.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldLaufIndex.setText("0");
        jTextFieldLaufIndex.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextFieldLaufIndex.setPreferredSize(new java.awt.Dimension(500, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextFieldLaufIndex, gridBagConstraints);

        jTextFieldErholungszeit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldErholungszeit.setText("0");
        jTextFieldErholungszeit.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextFieldErholungszeit.setPreferredSize(new java.awt.Dimension(500, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextFieldErholungszeit, gridBagConstraints);

        jTextFieldBelastung.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldBelastung.setText("0");
        jTextFieldBelastung.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextFieldBelastung.setPreferredSize(new java.awt.Dimension(500, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextFieldBelastung, gridBagConstraints);

        jTextFieldProtein.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldProtein.setText("0");
        jTextFieldProtein.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextFieldProtein.setPreferredSize(new java.awt.Dimension(500, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextFieldProtein, gridBagConstraints);

        jTextFieldFett.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldFett.setText("0");
        jTextFieldFett.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextFieldFett.setPreferredSize(new java.awt.Dimension(500, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextFieldFett, gridBagConstraints);

        jTextField1Typ.setText("jTextField3");
        jTextField1Typ.setMinimumSize(new java.awt.Dimension(150, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextField1Typ, gridBagConstraints);

        jTextFieldKalorien.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldKalorien.setText("0");
        jTextFieldKalorien.setMinimumSize(new java.awt.Dimension(150, 32));
        jTextFieldKalorien.setPreferredSize(new java.awt.Dimension(500, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextFieldKalorien, gridBagConstraints);

        jLabel4.setText("Startzeit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jLabel4, gridBagConstraints);

        jButton2Streckenskalierung.setText("Streckenlänge anpassen");
        jButton2Streckenskalierung.setToolTipText("Verschiebt die Höhe der Tour um den angegebenen Wert");
        jButton2Streckenskalierung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2StreckenskalierungActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jButton2Streckenskalierung, gridBagConstraints);

        jTextField1Streckenskalierung.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1Streckenskalierung.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTextField1Streckenskalierung, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 26;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 21;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 0);
        getContentPane().add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 44;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        getContentPane().add(jPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridheight = 15;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 0);
        getContentPane().add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        getContentPane().add(jPanel4, gridBagConstraints);

        setSize(new java.awt.Dimension(956, 709));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
        
    private void jButton3TourVerbindenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3TourVerbindenActionPerformed
       
        if(!CheckTable())return;
        if (jComboBox1.getItemCount()==1){
            JOptionPane.showMessageDialog(null,"Keine Tour zum Verbinden verfügbar!" ,"Achtung!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        TourDialog = new JTourVerbindenDialog(new JFrame(),true);
        TourDialog.show(this);
    }//GEN-LAST:event_jButton3TourVerbindenActionPerformed
        
    private void jButton6LoeschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6LoeschenActionPerformed
    
        
        int i,j;
        float Deltastrecke;
        int Deltazeit;
        int Zeitpunkt;
        int Startzeile[] = jTable1.getSelectedRows();
        int Laenge = Startzeile.length;
        if(Laenge == 0) return;
        if(Startzeile[Laenge-1] - Startzeile[0] != Laenge-1){
            JOptionPane.showMessageDialog(null,"Zum Löschen nur zusammenhängende Zeilen selektieren!" ,"Achtung!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Temp = new String[dataModel.getRowCount()-Laenge][9];
        for (i=0;i<Startzeile[0];i++)
            for (j=0;j<9;j++) Temp[i][j] = dataModel.getValueAt(i,j).toString();
        
        if (Startzeile[0] == 0) {
            Deltazeit = 0;
            Deltastrecke = 0;
        }
        else {
            Deltazeit = TronicHandle.ToSec(dataModel.getValueAt(Startzeile[0]-1,1).toString());
            Deltastrecke = Float.parseFloat(dataModel.getValueAt(Startzeile[0]-1,2).toString());
        }
        
        Deltastrecke = Float.parseFloat(dataModel.getValueAt(Startzeile[Laenge-1],2).toString())- Deltastrecke;
        Deltazeit = TronicHandle.ToSec(dataModel.getValueAt(Startzeile[Laenge-1],1).toString())- Deltazeit;
        
        for (i=0;i<dataModel.getRowCount() - Startzeile[0] - Laenge;i++){
            if(i + Startzeile[0] == 0) Temp[0][0] = "1";
            else Temp[Startzeile[0] + i][0] =  "" + (Integer.parseInt(Temp[Startzeile[0] +i -1][0])+1);
            Zeitpunkt = TronicHandle.ToSec(dataModel.getValueAt(Startzeile[Laenge-1] + i +1,1).toString()) - Deltazeit;
            Temp[Startzeile[0] + i][1] = TronicHandle.HMS(Zeitpunkt);
            Temp[Startzeile[0] + i][2] = format.format(Float.parseFloat(dataModel.getValueAt(Startzeile[Laenge-1] + i + 1,2).toString()) - Deltastrecke);
            for(j=3;j<9;j++) Temp[Startzeile[0] + i][j] = dataModel.getValueAt(Startzeile[Laenge-1] + i + 1,j).toString();
        }
        
        Laenge = dataModel.getRowCount()-Laenge;
        data = new String[Laenge][9];
        for (i=0; i< Laenge ;i++)
            for (j=0;j<9;j++)
                data[i][j] = Temp[i][j];
        
       
        jTable1.setSize(jTable1.getWidth(),jTable1.getRowCount()*jTable1.getRowHeight());
        jTable1.clearSelection();
        jTable1.repaint();
        
    }//GEN-LAST:event_jButton6LoeschenActionPerformed
    
    private void jButton5EinfügenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5EinfügenActionPerformed
       
        if(!CheckTable())return;
        
        int Startzeile = jTable1.getSelectedRow();
        format = new java.text.DecimalFormat("####0.000");
        formatsymbols = new java.text.DecimalFormatSymbols();
        formatsymbols.setDecimalSeparator('.');
        format.setDecimalFormatSymbols(formatsymbols);
        if(Startzeile == -1) {
            JOptionPane.showMessageDialog(null,"Bitte eine Zeile selektieren nach der die Daten eingefügt werden sollen!","Achtung!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Startzeile++;
        int i,j;
        int Anzahl = Buffer.length;
        float Summenstrecke = 0;
        int Zeitpunkt = TronicHandle.ToSec(dataModel.getValueAt(Startzeile-1,1).toString());
        Temp = new String[Anzahl + dataModel.getRowCount()][9];
        for (i=0;i<Startzeile;i++)
            for (j=0;j<9;j++) Temp[i][j] = dataModel.getValueAt(i,j).toString();
        for (i=0;i<Anzahl;i++){
            Temp[Startzeile+i][0] = "" + (Integer.parseInt(Temp[Startzeile+i-1][0])+1);
            Zeitpunkt = Zeitpunkt + Integer.parseInt(Buffer[i][1]);
            Temp[Startzeile+i][1] = TronicHandle.HMS(Zeitpunkt);
            Temp[Startzeile+i][2] = format.format((Float.parseFloat(Temp[Startzeile+i-1][2])) + Float.parseFloat(Buffer[i][2]));
            Summenstrecke += Float.parseFloat(Buffer[i][2]);
            for (j=3;j<9;j++) Temp[Startzeile+i][j] = Buffer[i][j];
        }
        for (i=0;i<dataModel.getRowCount()-Startzeile;i++){
            Temp[Startzeile + Anzahl + i][0] =  "" + (Integer.parseInt(Temp[Startzeile + Anzahl +i -1][0])+1);
            Zeitpunkt = Zeitpunkt + TronicHandle.ToSec(dataModel.getValueAt(Startzeile+i,1).toString()) - TronicHandle.ToSec(dataModel.getValueAt(Startzeile +i -1,1).toString());
            Temp[Startzeile + Anzahl + i][1] = TronicHandle.HMS(Zeitpunkt);
            Temp[Startzeile + Anzahl + i][2] = format.format(Float.parseFloat(dataModel.getValueAt(Startzeile+i,2).toString())+Summenstrecke);
            for(j=3;j<9;j++) Temp[Startzeile + Anzahl + i][j] = dataModel.getValueAt(Startzeile+i,j).toString();
        }
        Anzahl = Anzahl + dataModel.getRowCount();
        data = new String[Anzahl][9];
        for (i=0; i< Anzahl ;i++)
            for (j=0;j<9;j++)
                data[i][j] = Temp[i][j];
        
        jTable1.setSize(jTable1.getWidth(),jTable1.getRowCount()*jTable1.getRowHeight());
        jTable1.clearSelection();
        jTable1.setRowSelectionInterval(Startzeile-1,Startzeile-1);
        jTable1.repaint();
        
    }//GEN-LAST:event_jButton5EinfügenActionPerformed
    
    private void jButton4KopierenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4KopierenActionPerformed
      
        if(!CheckTable())return;
        
        int ignore = 0;
        int i,j;
        int Anfang;
        float Strecke;
        int Anzahl = jTable1.getSelectedRowCount();
        int Startzeile[] = jTable1.getSelectedRows();
        if(Startzeile.length == 0){
            jButton5Einfügen.setEnabled(false);
            return;
        }
        jButton5Einfügen.setEnabled(true);
        if (Startzeile[0] == 0) {
            Anfang = 0;
            ignore = 1;
            Strecke = Float.parseFloat(dataModel.getValueAt(Startzeile[0],2).toString());
        }
        else {Anfang = TronicHandle.ToSec(dataModel.getValueAt(Startzeile[0]-1,1).toString());
        Strecke = Float.parseFloat(dataModel.getValueAt(Startzeile[0]-1,2).toString());
        }
        Buffer = new String[Anzahl - ignore][9];
        for (i=0;i < Anzahl - ignore;i++){
            Buffer[i][0] = "" + (i+1);
            Buffer[i][1] = "" + (TronicHandle.ToSec(dataModel.getValueAt(Startzeile[i + ignore],1).toString()) - Anfang);
            Buffer[i][2] = format.format(Float.parseFloat(dataModel.getValueAt(Startzeile[i],2).toString())-Strecke);
            Anfang = TronicHandle.ToSec(dataModel.getValueAt(Startzeile[i + ignore],1).toString());
            Strecke = Float.parseFloat(dataModel.getValueAt(Startzeile[i],2).toString());
            
            for (j=3;j<9;j++) Buffer[i][j] = dataModel.getValueAt(Startzeile[i + ignore],j).toString();
        }
        
        
    }//GEN-LAST:event_jButton4KopierenActionPerformed
    
    private void jButton1HoeheAnfangEndeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1HoeheAnfangEndeActionPerformed
       
        if(!CheckTable())return;
        try{
            int Zeilenzahl = dataModel.getRowCount();
            float Anfangshoehe = Float.parseFloat(dataModel.getValueAt(0,3).toString());
            float Endhoehe = Float.parseFloat(dataModel.getValueAt(Zeilenzahl-1,3).toString());
            int i;
            for(i=0;i<Zeilenzahl;i++) dataModel.setValueAt(new Float(java.lang.Math.round(Float.parseFloat(dataModel.getValueAt(i,3).toString())
            + (Anfangshoehe - Endhoehe)/(float)Zeilenzahl * i)).toString(),i,3);
        }catch(Exception e){ JOptionPane.showMessageDialog(null,"Fehler in Tabelle!","Achtung!", JOptionPane.ERROR_MESSAGE);}
        jTable1.setModel(dataModel);
        jTable1.repaint();
    }//GEN-LAST:event_jButton1HoeheAnfangEndeActionPerformed
        
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
      
        if(Update)      changeModel();
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    private void jButton7SpeichernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7SpeichernActionPerformed
       
        CheckTable() ;
        java.text.DecimalFormat  formatp = new java.text.DecimalFormat("000000");
        java.text.DecimalFormat  formatneg = new java.text.DecimalFormat("00000");
        java.text.DecimalFormat  formatvp = new java.text.DecimalFormat("0000000"); //Format für V800
        java.text.DecimalFormat  formatvneg = new java.text.DecimalFormat("000000");
        
        
        int i;
        int Zeit;
        float Strecke;
        float Hoehe;
        int Hf;
        float Temp =0;
        float Geschw =0;
        int Cad;
        int Schrittl;
        String dummy;
        
        int Anzahl = dataModel.getRowCount();
        int selected = jComboBox1.getSelectedIndex() + 1;
        StringBuffer  TextBuffer = new StringBuffer();
   
        TronicHandle.Statistikhandle.TourData[selected].gesZeit = new int[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Strecke_gesZeit = new float[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Hoehe_gesZeit = new float[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Hf_gesZeit =new float[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Temperatur_gesZeit = new float[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Geschw_gesZeit = new float[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Cadence_gesZeit = new int[Anzahl];
        TronicHandle.Statistikhandle.TourData[selected].Schritt_länge = new int[Anzahl]; 
        
        for (i=0; i<Anzahl;i++){
            
            Zeit = TronicHandle.ToSec(dataModel.getValueAt(i,1).toString());
            Strecke = Float.parseFloat(dataModel.getValueAt(i,2).toString());
            Hoehe = Float.parseFloat(dataModel.getValueAt(i,3).toString());
            Hf =Integer.parseInt(dataModel.getValueAt(i,4).toString());
            Geschw = Float.parseFloat(dataModel.getValueAt(i,5).toString());
            Temp = Float.parseFloat(dataModel.getValueAt(i,6).toString());    
            Cad = Integer.parseInt(dataModel.getValueAt(i,7).toString());
            Schrittl = Integer.parseInt(dataModel.getValueAt(i,8).toString());
            
            TronicHandle.Statistikhandle.TourData[selected].gesZeit[i] = Zeit;
            TronicHandle.Statistikhandle.TourData[selected].Strecke_gesZeit[i] = Strecke;
            TronicHandle.Statistikhandle.TourData[selected].Hoehe_gesZeit[i] = Hoehe;
            TronicHandle.Statistikhandle.TourData[selected].Hf_gesZeit[i] =Hf;
            TronicHandle.Statistikhandle.TourData[selected].Geschw_gesZeit[i] = Geschw;
            TronicHandle.Statistikhandle.TourData[selected].Temperatur_gesZeit[i] = Temp;
            TronicHandle.Statistikhandle.TourData[selected].Cadence_gesZeit[i] = Cad;
            TronicHandle.Statistikhandle.TourData[selected].Schritt_länge[i] = Schrittl;
            
            if(polar||HAC){
            TextBuffer = TextBuffer.append(formatp.format(Zeit)).append('\t');
            TextBuffer = TextBuffer.append(formatp.format(java.lang.Math.round(Strecke * 100.0))).append('\t');
            if (Hoehe < 0) {
                TextBuffer = TextBuffer.append(formatneg.format(Hoehe)).append('\t');
            } else {
                TextBuffer = TextBuffer.append(formatp.format(Hoehe)).append('\t');
            }
            if (Hf < 0) {
                TextBuffer = TextBuffer.append(formatneg.format(Hf)).append('\t');
            } else {
                TextBuffer = TextBuffer.append(formatp.format(Hf)).append('\t');
            }
            TextBuffer = TextBuffer.append(formatp.format(Cad)).append('\t');
            if (!polar) {
                if (Temp < 0) {
                    TextBuffer = TextBuffer.append(formatneg.format((int)Temp)).append('\n');
                } else {
                    TextBuffer = TextBuffer.append(formatp.format((int)Temp)).append('\n');
                }
            } else {
                TextBuffer = TextBuffer.append(formatp.format(Geschw*10)).append('\n');
            }
            }
            if (V800) {
                TextBuffer = TextBuffer.append(formatvp.format(Zeit)).append('\t');
                TextBuffer = TextBuffer.append(formatvp.format(java.lang.Math.round(Strecke * 1000.0))).append('\t');
                if (Hoehe < 0) {
                    TextBuffer = TextBuffer.append(formatvneg.format(Hoehe * 10.0)).append('\t');
                } else {
                    TextBuffer = TextBuffer.append(formatvp.format(Hoehe * 10.0)).append('\t');
                }
                if (Hf < 0) {
                    TextBuffer = TextBuffer.append(formatvneg.format(Hf)).append('\t');
                } else {
                    TextBuffer = TextBuffer.append(formatvp.format(Hf)).append('\t');
                }
                TextBuffer = TextBuffer.append(formatvp.format(Cad)).append('\t');
                TextBuffer = TextBuffer.append(formatvp.format(Schrittl)).append('\t');
                TextBuffer = TextBuffer.append(formatvp.format(Geschw * 100)).append('\n');
                if (Temp < 0) {
                    TextBuffer = TextBuffer.append(formatvneg.format(Temp*10.0)).append('\n');
                } else {
                    TextBuffer = TextBuffer.append(formatvp.format(Temp*10.0)).append('\n');
                }
            }
        }
        DecimalFormat formatx = new java.text.DecimalFormat("####0.00");
        String dummystring = ""+ formatx.format(Math.round(Float.parseFloat(dataModel.getValueAt(dataModel.getRowCount()-1,2).toString())*100)/100.0);
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Tag",jTextField2Datum.getText().substring(0,2));
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Monat",jTextField2Datum.getText().substring(3,5));
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Jahr",jTextField2Datum.getText().substring(6,10));
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Stunde",jTextField3Startzeit.getText().substring(0,2));
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Minute",jTextField3Startzeit.getText().substring(3,5));
        if(V800) TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Sekunde",jTextField3Startzeit.getText().substring(6,8));
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Dauer","" + TronicHandle.ToSec(dataModel.getValueAt(dataModel.getRowCount()-1,1).toString()));
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Anzahl Datenpunkte","" + dataModel.getRowCount());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Strecke",dummystring.replace('.',','));
//        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("AnzahlMarken","" + jComboBox4MarkenZeit.getItemCount());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Typ",jTextField1Typ.getText());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Hoehenmeter","novalue");        
        
        
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Kalorien",jTextFieldKalorien.getText());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Fett",jTextFieldFett.getText());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Proteine",jTextFieldProtein.getText());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Belastung",jTextFieldBelastung.getText());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Erholungszeit",jTextFieldErholungszeit.getText());
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Running-Index",jTextFieldLaufIndex.getText());
        
        
        if (V800) TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Computer","Polar_V/M_Serie");
        if (polar) TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Computer","Polar");
        if (HAC) TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Computer","HAC");

//        for (i=0; i<jComboBox4MarkenZeit.getItemCount();i++){
//            
//            dummy = jComboBox4MarkenZeit.getItemAt(i).toString();
//            if(dummy.indexOf(' ')==-1)  TronicHandle.Statistikhandle.TourData[selected].
//            DataProperty.setProperty("Marke "+(i+1),"" + TronicHandle.ToSec(dummy)); //kein Marentext vorhanden
//            else  TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty(
//            "Marke "+(i+1),"" + TronicHandle.ToSec(dummy)  + dummy.substring(dummy.indexOf(' '),dummy.length()));
//    
//        }
  
 
        File file = new File(TronicHandle.Properties.getProperty("data.dir",TronicHandle.Properties.getProperty("working.dir")) +
        TronicHandle.SystemProperties.getProperty("file.separator") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Jahr") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Monat") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Tag") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute") +
     //   TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde","") +        
        "_Tour.txt");
 
        File file2 = new File(TronicHandle.Properties.getProperty("data.dir",TronicHandle.Properties.getProperty("working.dir")) +
        TronicHandle.SystemProperties.getProperty("file.separator") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Jahr") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Monat") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Tag") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute") +
  //      TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde","") +         
        "_Tour.cfg");
       
        File gpx = new File(TronicHandle.Properties.getProperty("GPS.dir",TronicHandle.Properties.getProperty("working.dir")) +
        TronicHandle.SystemProperties.getProperty("file.separator") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Jahr") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Monat") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Tag") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute") +
  //      TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde","") +         
        ".gpx");
        
        if (gpx_changed) {
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("GoogleEarth", gpx.getPath());
            save_gpx(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("GoogleEarth", ""), selected);
            gpx_changed = false;
        }

        
        try{
            Ausgabedatei = new FileOutputStream(file);
            Ausgabedatei.write(TextBuffer.toString().getBytes());
            Ausgabedatei.close();
        }catch (IOException e){
            JOptionPane.showMessageDialog(null,"IO-Fehler bei Speicherung der Tour Datei","Achtung!", JOptionPane.ERROR_MESSAGE);
        }
        
        try{
            Ausgabedatei = new FileOutputStream(file2);
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.store(Ausgabedatei,"Tour Eigenschaften: " +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Jahr") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Monat") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Tag") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde","") );
            
            Ausgabedatei.close();
        }catch (IOException e){
            JOptionPane.showMessageDialog(null,"IO-Fehler bei Speicherung der Tour Datei","Achtung!", JOptionPane.ERROR_MESSAGE);
        }
        
//Aktualisierung der Summenhöhenmeter        
        file = new File(TronicHandle.Properties.getProperty("data.dir",TronicHandle.Properties.getProperty("working.dir")) +
        TronicHandle.SystemProperties.getProperty("file.separator") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Jahr") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Monat") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Tag") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde") +
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute") +
  //      TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde","") + 
        "_Tour");      
        
        JTourData    Dummydata = new JTourData(file.toString(),TronicHandle);
        TronicHandle.Statistikhandle.TourData[selected].DataProperty.setProperty("Hoehenmeter","" + Dummydata.ges_Hoehep);          
     
          
//muss leider so kompliziert gespeichert werden, da die Datenmengen zu den config Eintragungen nicht passen würden (Anzahl der Datenpunkte bei Daten löschen)          
         try{
            Ausgabedatei = new FileOutputStream(file2);
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.store(Ausgabedatei,"Tour Eigenschaften: " +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Jahr") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Monat") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Tag") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute") +
            TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde",""));
            
            Ausgabedatei.close();
        }catch (IOException e){
            JOptionPane.showMessageDialog(null,"IO-Fehler bei Speicherung der Tour Datei","Achtung!", JOptionPane.ERROR_MESSAGE);
        };       
  
        int Selected = jComboBox1.getSelectedIndex();
        
        int Zahl = jComboBox1.getItemCount();
        
        String Text[] = new String[Zahl];
        for ( i=0; i<Zahl;i++)
            Text[i] = jComboBox1.getItemAt(i).toString();
        Text[Selected] = jTextField2Datum.getText() + "   " + dataModel.getValueAt(dataModel.getRowCount()-1,2).toString().replace('.',',') + "km";
        Update = false;
        jComboBox1.removeAllItems();
        for ( i=0;i<Zahl; i++)
            jComboBox1.addItem(Text[i]);
        jComboBox1.setSelectedIndex(Selected);
        Update = true;
         
        Saved = true;
        
       
        
    }//GEN-LAST:event_jButton7SpeichernActionPerformed
    
    private void jButton8BeendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8BeendenActionPerformed
     
        
        setVisible(false);
        dispose();
        if(Saved) {
            TronicHandle.ChangeModel();
            TronicHandle.Hauptfenster.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jButton8BeendenActionPerformed
        
    private void jButton2HoehenanpassungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2HoehenanpassungActionPerformed
       
        if(!CheckTable())return;
        int i=0;
        int Zeilenzahl = dataModel.getRowCount();
        float value =0;
        try{
            float Differenz = Float.parseFloat(jTextField1Hoehenanpassung.getText());
            for(i= 0; i<Zeilenzahl; i++){
                value = Float.parseFloat(dataModel.getValueAt(i,3).toString()) + Differenz;
                dataModel.setValueAt(""+value,i,3);
            }
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Fehler im Feld für Höhenanpassung!\n"+e.getMessage()+"  " + i,"Achtung!", JOptionPane.ERROR_MESSAGE);}
        jTable1.repaint();
    }//GEN-LAST:event_jButton2HoehenanpassungActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
        if(Saved) {
            TronicHandle.ChangeModel();
            TronicHandle.Hauptfenster.setSelectedIndex(0);
        }
    }//GEN-LAST:event_closeDialog

    private void jButton2StreckenskalierungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2StreckenskalierungActionPerformed
        // TODO add your handling code here:
               if(!CheckTable())return;
        int i;
        int Zeilenzahl = dataModel.getRowCount();
        try{
            float Differenz = Float.parseFloat(jTextField1Streckenskalierung.getText()) /
                   Float.parseFloat(dataModel.getValueAt(Zeilenzahl-1,2).toString());
            JOptionPane.showMessageDialog(null,"Skalierungsfaktor für Strecke: "+ Math.round(Differenz*100)/100.0,"Streckenänderung", JOptionPane.INFORMATION_MESSAGE);
            for(i= 0; i<Zeilenzahl; i++){
               dataModel.setValueAt(new Float((float)(Float.parseFloat(dataModel.getValueAt(i,2).toString())* Differenz)).toString(),i,2);
               dataModel.setValueAt(new Float((float)(Float.parseFloat(dataModel.getValueAt(i,5).toString())* Differenz)).toString(),i,5);
               dataModel.setValueAt(new Integer((int)(Integer.parseInt(dataModel.getValueAt(i,8).toString())* Differenz)).toString(),i,8);
            }
        }catch(Exception e) {JOptionPane.showMessageDialog(null,"Fehler im Feld für Streckenskalierung!","Achtung!", JOptionPane.ERROR_MESSAGE);};
        jTable1.repaint();
    }//GEN-LAST:event_jButton2StreckenskalierungActionPerformed
    
    
    private void changeModel(){
        int selected = jComboBox1.getSelectedIndex()+1;
        String dummy;
        gpx_changed = false;
        
        int num = Integer.parseInt(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Anzahl Datenpunkte"));
  
        if( TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Computer","HAC").equalsIgnoreCase("HAC")) HAC = true;
        else if(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Computer").equalsIgnoreCase("Polar")) polar = true;
        else if(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Computer").equalsIgnoreCase("Polar_V/M_Serie")) V800 = true;
      
        final  String[]names = {"Nummer", "Zeit", "Strecke", "Höhe","Herzfrequenz","Geschwindigkeit","Temperatur","Cadence","Schrittlänge"};
     
        int ColumnCount = num;
      
        data = new String[ColumnCount][9];
        
        
        for (int i = 0; i < ColumnCount; i++) {
            data[i][0] = new Integer(i + 1).toString();
            data[i][1] = TronicHandle.HMS(TronicHandle.Statistikhandle.TourData[selected].gesZeit[i]);
            data[i][2] = format.format(TronicHandle.Statistikhandle.TourData[selected].Strecke_gesZeit[i]);
            data[i][3] = new Float(TronicHandle.Statistikhandle.TourData[selected].RAWHm[i]).toString();
            data[i][4] = new Integer((int)TronicHandle.Statistikhandle.TourData[selected].RAWHF[i]).toString();
            data[i][5] = new Float(TronicHandle.Statistikhandle.TourData[selected].RAWGeschw[i]).toString();
            data[i][6] = new Float(TronicHandle.Statistikhandle.TourData[selected].Temperatur_gesZeit[i]).toString();
            data[i][7] = new Integer((int)TronicHandle.Statistikhandle.TourData[selected].RAWCadence[i]).toString();
            data[i][8] = new Integer((int)TronicHandle.Statistikhandle.TourData[selected].RAWSchrittlänge[i]).toString();

        }
        
        dataModel = new AbstractTableModel() {
            public int getColumnCount() { return names.length ; }
            public String getColumnName(int column) {return names[column];}
            
            public int getRowCount() { return data.length;}
            public Object getValueAt(int row, int col) { return data[row][col]; }
            public void setValueAt(Object Ob,int row, int col) {data[row][col] = Ob.toString();}
            public boolean isCellEditable(int rowm, int col){if (col >=1)return(true); else return(false);};
            
        };
        
        
        TableColumn NummerColumn = new TableColumn(0);
        NummerColumn.setHeaderValue(names[0]);
        NummerColumn.setResizable(false);
        TableColumn ZeitColumn = new TableColumn(1);
        ZeitColumn.setHeaderValue(names[1]);
        ZeitColumn.setResizable(false);
        TableColumn StreckeColumn = new TableColumn(2);
        StreckeColumn.setHeaderValue(names[2]);
        StreckeColumn.setResizable(false);
        TableColumn HoeheColumn = new TableColumn(3);
        HoeheColumn.setHeaderValue(names[3]);
        HoeheColumn.setResizable(false);
        TableColumn HfColumn = new TableColumn(4);
        HfColumn.setHeaderValue(names[4]);
        HfColumn.setResizable(false);
        TableColumn GeschwindigkeitColumn = new TableColumn(5);
        GeschwindigkeitColumn.setHeaderValue(names[5]);
        GeschwindigkeitColumn.setResizable(false);
        TableColumn TemperaturColumn = new TableColumn(6);
        TemperaturColumn.setHeaderValue(names[6]);
        TemperaturColumn.setResizable(false);
        TableColumn CadenceColumn = new TableColumn(7);
        CadenceColumn.setHeaderValue(names[7]);
        CadenceColumn.setResizable(false);
        TableColumn SchrittlängeColumn = new TableColumn(8);
        SchrittlängeColumn.setHeaderValue(names[8]);
        SchrittlängeColumn.setResizable(false);
        
        
        NummerColumn.setMinWidth((int) 40 * TronicHandle.FontSize / 12);
        ZeitColumn.setMinWidth((int) 75 * TronicHandle.FontSize / 12);
        StreckeColumn.setMinWidth((int) 60 * TronicHandle.FontSize / 12);
        HoeheColumn.setMinWidth((int) 60 * TronicHandle.FontSize / 12);
        HfColumn.setMinWidth((int) 85 * TronicHandle.FontSize / 12);
        TemperaturColumn.setMinWidth((int) 85 * TronicHandle.FontSize / 12);
        GeschwindigkeitColumn.setMinWidth((int) 85 * TronicHandle.FontSize / 12);
        CadenceColumn.setMinWidth((int) 85 * TronicHandle.FontSize / 12);
        SchrittlängeColumn.setMinWidth((int) 85 * TronicHandle.FontSize / 12);

        DefaultTableCellRenderer TableCell = new DefaultTableCellRenderer();
        TableCell.setHorizontalAlignment(JLabel.CENTER);
        NummerColumn.setCellRenderer(TableCell);
        ZeitColumn.setCellRenderer(TableCell);
        StreckeColumn.setCellRenderer(TableCell);
        HoeheColumn.setCellRenderer(TableCell);
        HfColumn.setCellRenderer(TableCell);
        TemperaturColumn.setCellRenderer(TableCell);
        GeschwindigkeitColumn.setCellRenderer(TableCell);
        CadenceColumn.setCellRenderer(TableCell);
        SchrittlängeColumn.setCellRenderer(TableCell);

        DefaultTableColumnModel FileTableModel = new DefaultTableColumnModel();
        FileTableModel.addColumn(NummerColumn);
        FileTableModel.addColumn(ZeitColumn);
        FileTableModel.addColumn(StreckeColumn);
        FileTableModel.addColumn(HoeheColumn);
        FileTableModel.addColumn(HfColumn);
        FileTableModel.addColumn(GeschwindigkeitColumn);
        FileTableModel.addColumn(TemperaturColumn);
        FileTableModel.addColumn(CadenceColumn);
        FileTableModel.addColumn(SchrittlängeColumn);
      
        jTable1.setModel(dataModel);
        jTable1.setColumnModel(FileTableModel);
        jTable1.setRowHeight(TronicHandle.FontSize+5);
        JScrollBar verticaldummy = jScrollPane1.getVerticalScrollBar();
        
        verticaldummy.setPreferredSize(new Dimension(TronicHandle.FontSize+5,TronicHandle.FontSize+5));
        jScrollPane1.setVerticalScrollBar(verticaldummy);
        
        jTextField2Datum.setText(TronicHandle.Statistikhandle.TourData[selected].Datum);
        
        jTextField3Startzeit.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Stunde","") + ":"
        + TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Minute","00")+":"
         + TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Sekunde","00"));
        jTextField1Typ.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Typ","nicht bekannt"));
   
        jTextFieldKalorien.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Kalorien", "0"));
        jTextFieldFett.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Fett", "0"));
        jTextFieldProtein.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Proteine", "0"));
        jTextFieldBelastung.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Belastung", "0"));
        jTextFieldErholungszeit.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Erholungszeit","0"));
        jTextFieldLaufIndex.setText(TronicHandle.Statistikhandle.TourData[selected].DataProperty.getProperty("Running-Index","0"));
        
        
        
        
        
        
        
 //       int    AnzahlMarken = TronicHandle.Statistikhandle.TourData[selected].AnzahlMarken;
 //       Update = false;
  
//        jComboBox4MarkenZeit.removeAllItems();
//        
//        if (AnzahlMarken !=0){
//            for(int i=0; i<AnzahlMarken;i++){
//                dummy = TronicHandle.Statistikhandle.TourData[selected].Marken[i];
//                
//                while(!TronicHandle.CheckComboEntry(jComboBox4MarkenZeit, dummy))dummy += " ";
//                
//                
//                jComboBox4MarkenZeit.addItem(dummy);
//                
//      
//            }    
//         
//            jComboBox4MarkenZeit.setSelectedIndex(0);
//        }
      
//        Update = true;
       
        repaint();
    
    }
    
    
    private boolean CheckTable() {
        int i, j;
        int Stunde;
        int Minute;
        int Sekunde;
        int Meldung;
     
        int selected = jComboBox1.getSelectedIndex() + 1;
  

        for (i = 0; i < dataModel.getRowCount(); i++) {
            if (TronicHandle.ToSec(dataModel.getValueAt(i, 1).toString()) == -1) {
                JOptionPane.showMessageDialog(null, "Fehler beim Zeitwert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }
            if (i != 0) {
                if (TronicHandle.ToSec(dataModel.getValueAt(i, 1).toString()) == TronicHandle.ToSec(dataModel.getValueAt(i - 1, 1).toString())) {
                    JOptionPane.showMessageDialog(null, "Fehler beim Zeitwert in Zeile " + (i) + " oder " + (i + 1) + "!" + "\nGleicher Zeitwert in zwei Zeilen nicht erlaubt!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                    jTable1.setRowSelectionInterval(i, i);
                    jScrollPane1.getViewport().setViewPosition(new Point(0, (i - 1) * jTable1.getRowHeight()));
                    return false;
                }
                if (TronicHandle.ToSec(dataModel.getValueAt(i, 1).toString()) < TronicHandle.ToSec(dataModel.getValueAt(i - 1, 1).toString())) {
                    JOptionPane.showMessageDialog(null, "Fehler beim Zeitwert in Zeile " + (i) + " oder " + (i + 1) + "!" + "\nZeitwerte müssen aufsteigend sein!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                    jTable1.setRowSelectionInterval(i, i);
                    jScrollPane1.getViewport().setViewPosition(new Point(0, (i - 1) * jTable1.getRowHeight()));
                    return false;
                }
            }
            try {
                Float.parseFloat(dataModel.getValueAt(i, 2).toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Streckenwert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }
            if (i != 0) {
                if (Float.parseFloat(dataModel.getValueAt(i, 2).toString()) < Float.parseFloat(dataModel.getValueAt(i - 1, 2).toString())) {
                    JOptionPane.showMessageDialog(null, "Fehler beim Streckenwerte in Zeile " + (i + 1) + "!" + "\nStreckenwerte müssen aufsteigend sein!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                    jTable1.setRowSelectionInterval(i, i);
                    jScrollPane1.getViewport().setViewPosition(new Point(0, 1 * jTable1.getRowHeight()));
                    return false;
                }
            }

            try {
                Float.parseFloat(dataModel.getValueAt(i, 3).toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Höhenwert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }
            try {
                Integer.parseInt(dataModel.getValueAt(i, 4).toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Herzfrequenzwert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }

            try {
                Float.parseFloat(dataModel.getValueAt(i, 5).toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Geschwindigkeitswert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }

            try {
                Float.parseFloat(dataModel.getValueAt(i, 6).toString());
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Temperaturwert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }

            try {
                Integer.parseInt(dataModel.getValueAt(i, 7).toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Cadenzewert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }

            try {
                Integer.parseInt(dataModel.getValueAt(i, 8).toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fehler beim Schrittlängenwert in Zeile " + (i + 1) + "!", "Achtung!", JOptionPane.ERROR_MESSAGE);
                jTable1.setRowSelectionInterval(i, i);
                jScrollPane1.getViewport().setViewPosition(new Point(0, i * jTable1.getRowHeight()));
                return false;
            }

        }

        try {
            int Tag;
            int Monat;
            int Jahr;
            Tag = Integer.parseInt(jTextField2Datum.getText().substring(0, 2));
            Monat = Integer.parseInt(jTextField2Datum.getText().substring(3, 5));
            Jahr = Integer.parseInt(jTextField2Datum.getText().substring(6, 10));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fehler in der Datumangabe! ", "Achtung!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        try {

            Stunde = Integer.parseInt(jTextField3Startzeit.getText().substring(0, 2));
            Minute = Integer.parseInt(jTextField3Startzeit.getText().substring(3, 5));
            Sekunde = Integer.parseInt(jTextField3Startzeit.getText().substring(6, 8));
            if (Stunde > 23 || Stunde < 0 || Minute > 59 || Minute < 0 || Sekunde <0 || Sekunde>59) {
                JOptionPane.showMessageDialog(null, "Fehler in der Startzeitangabe! ", "Achtung!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fehler in der Startzeitangabe! ", "Achtung!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

//        for (i = 0; i < jComboBox4MarkenZeit.getItemCount(); i++) {
//
//            if (TronicHandle.ToSec(jComboBox4MarkenZeit.getItemAt(i).toString()) == -1) {
//                JOptionPane.showMessageDialog(null, "Fehler in der Zeitangabe der Markierung " + (i + 1), "Achtung!", JOptionPane.ERROR_MESSAGE);
//                jComboBox4MarkenZeit.setSelectedIndex(i);
//                return false;
//            }
//        }
//        for (i = 1; i < jComboBox4MarkenZeit.getItemCount(); i++) { //die Schleife muss 2 mal hintereinander durchlaufen werden
//            //da zuerste auf korrekte Syntax aller Marken geprüft werden muss
//            // und danach auf die Reihenfolge
//
//            if (i > 0) {
//                if (TronicHandle.ToSec(jComboBox4MarkenZeit.getItemAt(i).toString())
//                        < TronicHandle.ToSec(jComboBox4MarkenZeit.getItemAt(i - 1).toString())) {
//                    Meldung = JOptionPane.showConfirmDialog(null, "Fehler in der Zeitangabe der Markierung " + (i + 1) + "\nDie Zeitpunkte der Marken müssen aufsteigend sein!\n\nSollen die Marken sortiert werden?", "Achtung!", JOptionPane.OK_CANCEL_OPTION);
//                    if (Meldung == JOptionPane.OK_OPTION) {
//                        TronicHandle.SortMarken(jComboBox4MarkenZeit);
//                    } else {
//                        //                    JOptionPane.showMessageDialog(null,"Fehler in der Zeitangabe der Markierung " + (i+1) +"\n Die Zeitpunkte der Marken müssen aufsteigend sein!","Achtung!", JOptionPane.ERROR_MESSAGE);
//                        jComboBox4MarkenZeit.setSelectedIndex(i);
//                        return false;
//                    }
//                }
//            }
//
//        }
//        if (jComboBox4MarkenZeit.getItemCount() > 0) {
//            if (TronicHandle.ToSec(jComboBox4MarkenZeit.getItemAt(jComboBox4MarkenZeit.getItemCount() - 1).toString())
//                    > TronicHandle.ToSec(dataModel.getValueAt(dataModel.getRowCount() - 1, 1).toString())) {
//                JOptionPane.showMessageDialog(null, "Fehler in der Zeitangabe der Markierung!\n Zeit der Markierung später als letzter Datenpunkt! ", "Achtung!", JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//        }

        return true;
    }

    
    public void TourVerbindeAktion(int Index) {
        
  
        if (Index == jComboBox1.getSelectedIndex()) {  //der selektierte Eintrag wird beim TourVerbindeDialog ausgeblendet
            Index++;
        }
        Index++; //JTourData[0] beinhaltet die Summenstatistik
        if (TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Computer","HAC").equalsIgnoreCase("Polar_V/M_Serie")) {
            V800 = true;
            polar = false;
            HAC = false;
        }
        int i, j;
        float Deltahoehe;
        float Strecke = Float.parseFloat(dataModel.getValueAt(dataModel.getRowCount() - 1, 2).toString());
        int Zeit = TronicHandle.ToSec(dataModel.getValueAt(dataModel.getRowCount() - 1, 1).toString());
        int Anzahl = dataModel.getRowCount();
        int num = TronicHandle.Statistikhandle.TourData[Index].Datenpunkte - 1; //erster Datenpunkt muss ignoriert werden


        if (jRadioButton1mitHoehenanpassung.isSelected()) {
            Deltahoehe = Float.parseFloat(dataModel.getValueAt(Anzahl - 1, 3).toString())
                    - TronicHandle.Statistikhandle.TourData[Index].Hoehe_gesZeit[0];
        } else {
            Deltahoehe = 0;
        }
        Temp = new String[num + dataModel.getRowCount()][9];
        for (i = 0; i < Anzahl; i++) {
            for (j = 0; j < 9; j++) {
                Temp[i][j] = dataModel.getValueAt(i, j).toString();
            }
        }
        for (i = 0; i < num; i++) {
            Temp[Anzahl + i][0] = "" + (Integer.parseInt(Temp[Anzahl + i - 1][0]) + 1);
            Temp[Anzahl + i][1] = TronicHandle.HMS(Zeit + TronicHandle.Statistikhandle.TourData[Index].gesZeit[i + 1]);
            Temp[Anzahl + i][2] = format.format(Strecke + TronicHandle.Statistikhandle.TourData[Index].Strecke_gesZeit[i + 1]);
            Temp[Anzahl + i][3] = new Float(TronicHandle.Statistikhandle.TourData[Index].Hoehe_gesZeit[i + 1] + Deltahoehe).toString();
            Temp[Anzahl + i][4] = new Integer((int)TronicHandle.Statistikhandle.TourData[Index].RAWHF[i + 1]).toString();
            Temp[Anzahl + i][5] = new Float(TronicHandle.Statistikhandle.TourData[Index].Geschw_gesZeit[i + 1]).toString();
            Temp[Anzahl + i][6] = new Float(TronicHandle.Statistikhandle.TourData[Index].Temperatur_gesZeit[i + 1]).toString();
            Temp[Anzahl + i][7] = new Integer((int)TronicHandle.Statistikhandle.TourData[Index].RAWCadence[i + 1]).toString();
            Temp[Anzahl + i][8] = new Integer((int)TronicHandle.Statistikhandle.TourData[Index].RAWSchrittlänge[i + 1]).toString();

        }
        data = new String[Anzahl + num][9];
        for (i = 0; i < Anzahl + num; i++) {
            for (j = 0; j < 9; j++) {
                data[i][j] = Temp[i][j];
            }
        }

        jTable1.setSize(jTable1.getWidth(), jTable1.getRowCount() * jTable1.getRowHeight());

        jTable1.clearSelection();
        jTable1.setRowSelectionInterval(0, 0);
        jTable1.repaint();
        jScrollPane1.repaint();
        
        float Zeit_master = TronicHandle.Statistikhandle.TourData[jComboBox1.getSelectedIndex()+1].gesammtZeit;
        float Zeit_slave = TronicHandle.Statistikhandle.TourData[Index].gesammtZeit;
        
        jTextFieldKalorien.setText(
                ""+(Integer.parseInt(jTextFieldKalorien.getText())+ 
                Integer.parseInt(TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Kalorien", "0"))));
                
        jTextFieldFett.setText(
                ""+(int)((Integer.parseInt(jTextFieldFett.getText())*Zeit_master+ 
                Integer.parseInt(TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Fett", "0"))*Zeit_slave)
                        /(Zeit_master+Zeit_slave)));
        
        jTextFieldProtein.setText(
                ""+(int)((Integer.parseInt(jTextFieldProtein.getText())*Zeit_master+ 
                Integer.parseInt(TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Proteine", "0"))*Zeit_slave)
                        /(Zeit_master+Zeit_slave)));
        
        jTextFieldBelastung.setText(
                ""+(Integer.parseInt(jTextFieldBelastung.getText())+ 
                Integer.parseInt(TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Belastung", "0"))));
        
        jTextFieldErholungszeit.setText(
                ""+(Integer.parseInt(jTextFieldErholungszeit.getText())+ 
                Integer.parseInt(TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Erholungszeit", "0"))));

        jTextFieldLaufIndex.setText(
                ""+(int)((Integer.parseInt(jTextFieldLaufIndex.getText())*Zeit_master+ 
                Integer.parseInt(TronicHandle.Statistikhandle.TourData[Index].DataProperty.getProperty("Running-Index", "0"))*Zeit_slave)
                        /(Zeit_master+Zeit_slave)));
 
        for (i=0; i< TronicHandle.Statistikhandle.TourData[Index].GeoDataArray.size();i++)
        TronicHandle.Statistikhandle.TourData[jComboBox1.getSelectedIndex()+1].GeoDataArray.add(
                TronicHandle.Statistikhandle.TourData[Index].GeoDataArray.get(i));
        
        gpx_changed = true;

//        int AnzahlMarken = TronicHandle.Statistikhandle.TourData[Index].AnzahlMarken;
//        Zeit = TronicHandle.ToSec(dataModel.getValueAt(Anzahl - 1, 1).toString());

    }
    
     private void save_gpx(String gpx_file, int j) {//j = selected Tour
       
        File gpx = new File(gpx_file);
 //       if(!gpx.exists()) return;
        
        GregorianCalendar gc = new GregorianCalendar();  //aktuelle Zeit ermitteln
        String aktZeit = formatTime(gc);
        
        StringBuffer doc = new StringBuffer();
        
        doc.append("<?xml version='1.0' encoding='utf-8'?>\n"
                + //Kopfzeilen einfach kopiert aus default
                "<gpx xmlns=\"http://www.topografix.com/GPX/1/1\"\n"
                + "xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 "
                + "http://www.topografix.com/GPX/1/1/gpx.xsd\" "
                + "creator=\"V800 Downloader  - https://github.com/pcolby/bipolar\" \n"
                + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n"
                + "version=\"1.1\">\n");

        doc.append("<metadata>\n");
        doc.append("\t<name>" + gpx_file + "</name>\n");
        doc.append("\t<desc> GPX encoding of" + gpx_file + "</desc>\n");
        doc.append("\t<author>\n"
                + "\t\t<link href=\"https://github.com/pcolby/bipolar\">\n"
                + "\t\t\t<text>Created by Ciclotronic, based on Bipolar</text>\n"
                + "\t\t</link>\n"
                + "\t</author>\n");

        doc.append("\t<time>" + aktZeit + "Z</time>\n");
        doc.append("</metadata>\n");

    //    for (Iterator it = parsedExercises.entrySet().iterator(); it.hasNext();) {
   //         Map.Entry exercise = (Map.Entry) it.next();
            doc.append("<trk>\n");
            doc.append("\t<src>\n");
            doc.append("created CicloTronic TourEditor append files");
            doc.append("\n\t</src>\n");
            doc.append("\t<trkseg>\n");

    //        HashMap route = (HashMap) map.get(ROUTE);
    //        if (route != null) {
    boolean gpxOK = false;
    if (TronicHandle.Statistikhandle.TourData[j].GeoDataArray.size()!=0)   
    gpxOK = true;
                
                for (int i = 0; i < TronicHandle.Statistikhandle.TourData[j].GeoDataArray.size(); i=i+2) {
                    doc.append("\t\t<trkpt lon=\"" + TronicHandle.Statistikhandle.TourData[j].GeoDataArray.get(i) 
                            + "\"     lat=\"" + TronicHandle.Statistikhandle.TourData[j].GeoDataArray.get(i+1) + "\" >\n");
//                    doc.append("\t\t\t<ele>" + altitude.get(i) + "</ele>\n");
//
//                    temptime = (GregorianCalendar) StartTime.clone();
//                    temptime.add(Calendar.MILLISECOND, (int) (long) duration.get(i));
//
//                    doc.append("\t\t\t<time>" + formatTime(temptime) + "</time>\n");
//                    doc.append("\t\t\t<sat>" + satellites.get(i) + "</sat>\n");
                    doc.append("\t\t</trkpt>\n");

    //            };
              
            };
            doc.append("\t</trkseg>\n");
            doc.append("</trk>\n");
   //     }
        doc.append("</gpx>");
        FileWriter output;
try{output = new FileWriter(gpx);}catch (Exception e){return;};
         try {

            output.write(doc.toString());

            output.flush();
            output.close();

        } catch (Exception e) {};
    }
       
   private String formatTime (GregorianCalendar gc){
         String aktZeit =  ""+gc.get(Calendar.YEAR) +"-" 
                      + (int)(gc.get(Calendar.MONTH)+1) +"-"
                      + gc.get(Calendar.DATE)+"T" 
                      + gc.get(Calendar.HOUR_OF_DAY)+":"
                      + gc.get(Calendar.MINUTE)+":" 
                      + gc.get(Calendar.SECOND);
        
        return aktZeit;
        
    } 
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new JTourEditor(new javax.swing.JFrame(), true).setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1HoeheAnfangEnde;
    private javax.swing.JButton jButton2Hoehenanpassung;
    private javax.swing.JButton jButton2Streckenskalierung;
    private javax.swing.JButton jButton3TourVerbinden;
    private javax.swing.JButton jButton4Kopieren;
    private javax.swing.JButton jButton5Einfügen;
    private javax.swing.JButton jButton6Loeschen;
    private javax.swing.JButton jButton7Speichern;
    private javax.swing.JButton jButton8Beenden;
    public javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1mitHoehenanpassung;
    private javax.swing.JRadioButton jRadioButton2ohneHoehenanpassung;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1Hoehenanpassung;
    private javax.swing.JTextField jTextField1Streckenskalierung;
    private javax.swing.JTextField jTextField1Typ;
    private javax.swing.JTextField jTextField2Datum;
    private javax.swing.JTextField jTextField3Startzeit;
    private javax.swing.JTextField jTextFieldBelastung;
    private javax.swing.JTextField jTextFieldErholungszeit;
    private javax.swing.JTextField jTextFieldFett;
    private javax.swing.JTextField jTextFieldKalorien;
    private javax.swing.JTextField jTextFieldLaufIndex;
    private javax.swing.JTextField jTextFieldProtein;
    // End of variables declaration//GEN-END:variables
        private JCicloTronic TronicHandle;
        private TableModel dataModel;
        private boolean Update;
        private String[][] Temp;
        private String[][] Buffer;
        private String[][] data;
        private JTourVerbindenDialog TourDialog;
        private java.io.FileOutputStream Ausgabedatei;
        private boolean Saved;
        private java.text.DecimalFormat  format;
        private java.text.DecimalFormatSymbols formatsymbols;
        private int  oldselection;
        boolean HAC = false;
        boolean polar = false;
        boolean V800 = false;
        private boolean gpx_changed = false;

    
        
}



